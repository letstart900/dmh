# -*- coding: utf-8 -*-
"""Final_NaiveBayes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kd6MGzVJtZIjVYzjHIWv8YuYjiuearxy
"""

def createTable(inputDict,outputList):
  TableDict={}
  CountList=[]
  for key in inputDict.keys():
    lista=inputDict[key]
    setA=set(lista)
    CountList.append(len(setA))
    for i in setA:
      countYes=0
      countNo=0
      ans=[]
      for j in range(0,len(lista)):
        if i==lista[j]:
          if outputList[j]=='yes':
            countYes=countYes+1
          elif outputList[j]=='no':
            countNo=countNo+1
      ans.append(countYes)
      ans.append(countNo)
      TableDict[i]=ans
    
  return TableDict,CountList

def intial(df):
  inputDict={}
  attributes=[]
  for col in df.columns:
    if not (col=='id' or col=='Buy_Computer'):
      attributes.append(col)

  for j in range(1,len(df.columns)-1):
    inputDict[attributes[j-1]]=df[attributes[j-1]].values.tolist()

  list2=df['Buy_Computer'].values.tolist()
  
  return createTable(inputDict,list2)

def total_yes_no(df):
  
  countYes=df['Buy_Computer'].value_counts()['yes']
  countNo=df['Buy_Computer'].value_counts()['no']

  count=[]
  count.append(countYes)
  count.append(countNo)
  
  return count

def classify(Table,Count,Total_data_points,CList,q1):
  prob_yes=1
  prob_no=1
  for i in range(len(q1)):
    if(Table[q1[i]][0]==0):
      prob_yes = prob_yes * ((Table[q1[i]][0]+(1/CList[i]))/(Count[0]+1))
    else:
      prob_yes = prob_yes * Table[q1[i]][0]/Count[0]
    if(Table[q1[i]][1]==0):
      prob_no = prob_no * ((Table[q1[i]][1]+(1/CList[i]))/(Count[1]+1))
    else:
      prob_no = prob_no * Table[q1[i]][1]/Count[1]

  prob_yes = prob_yes * Count[0]/Total_data_points
  prob_no = prob_no * Count[1]/Total_data_points

  Denominator = prob_yes + prob_no

  prob_yes = prob_yes/Denominator

  prob_no = prob_no/Denominator

  print("Probablity of buying a computer is ",prob_yes)
  print("Probablity of not buying a computer is ",prob_no)

  if prob_yes > prob_no:
    print(q1," given these conditions buy a computer = yes")
  elif prob_yes < prob_no:
    print(q1," given these conditions buy a computer = no")

def main():
  df=pd.read_csv('Buy_Computer.csv')
  print(df)
  print()
  Table,CList=intial(df)
  Count=total_yes_no(df)
  Total_data_points=len(df)
  q1=['youth','medium','no','excellent']
  classify(Table,Count,Total_data_points,CList,q1)

import pandas as pd

main()